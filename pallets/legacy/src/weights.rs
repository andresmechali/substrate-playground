
//! Autogenerated weights for `pallet_legacy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `2`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `fedora-1.tailff194.ts.net`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_legacy
// --extrinsic
// *
// --steps
// 2
// --repeat
// 1
// --output
// pallets/legacy/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use crate::*;

/// Weight functions for `pallet_legacy`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for SubstrateWeight<T> {
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Legacy Nonce (r:1 w:1)
	// Storage: Legacy OwnerMap (r:1 w:1)
	// Storage: Legacy SecretMap (r:0 w:1)
	/// The range of component `b` is `[1, 10]`.
	fn create_secret() -> Weight {
		// Minimum execution time: 13_566 nanoseconds.
		Weight::from_ref_time(15_338_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

pub trait WeightInfo {
	fn create_secret() -> Weight;
}